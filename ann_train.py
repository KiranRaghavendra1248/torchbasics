{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30648,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\nfrom tqdm import tqdm\n\ntraining_data = datasets.FashionMNIST(\n    root=\"data\",\n    train=True,\n    download=True,\n    transform=ToTensor()\n)\n\ntest_data = datasets.FashionMNIST(\n    root=\"data\",\n    train=False,\n    download=True,\n    transform=ToTensor()\n)\n\ndef check_accuracy(y_pred,y):\n    _,predpos=y_pred.max(1)\n    num_samples=len(y)\n    num_correct=(predpos==y).sum()\n    return (num_correct/num_samples)*100\n\ntrain_dataloader = DataLoader(training_data, batch_size=64)\ntest_dataloader = DataLoader(test_data, batch_size=64)\n\nclass BasicANN(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.flatten = nn.Flatten()\n        self.linear_block = nn.Sequential(\n            nn.Linear(28*28,512),\n            nn.ReLU(),\n            nn.Linear(512,256),\n            nn.ReLU(),\n            nn.Linear(256,10))\n        \n    def forward(self,x):\n        x = self.flatten(x)\n        x = self.linear_block(x)\n        return x\n\n# Hyperparams\nlearning_rate = 0.001\nbatch_size = 64\nnum_epochs = 10\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(\"Using\",device)\n\nmodel = BasicANN()\n\nloss_fun = nn.CrossEntropyLoss()\noptim = torch.optim.Adam(model.parameters(),learning_rate)\n\ndef train_loop(model,dataloader,loss_fun,optimizer):\n    size = len(dataloader.dataset)\n    model.train()\n    model.to(device)\n    for epoch in range(num_epochs):\n        losses = []\n        accuracies = []\n        loop = tqdm(enumerate(dataloader), total=len(dataloader), leave=True)\n        for batch,(x,y) in loop:\n            # put on cuda\n            x = x.to(device)\n            y = y.to(device)\n    \n            # forward pass\n            y_pred = model(x)\n            \n            # calculate loss & accuracy\n            loss = loss_fun(y_pred,y)\n            losses.append(loss.detach().item())\n            \n            accuracy = check_accuracy(y_pred.detach(),y)\n            accuracies.append(accuracy.item())\n            \n            # zero out prior gradients\n            optimizer.zero_grad()\n            \n            # # backprop\n            loss.backward()\n            \n            # update weights\n            optimizer.step()\n            \n            # Update TQDM progress bar\n            loop.set_description(f\"Epoch [{epoch}/{num_epochs}] \")\n            loop.set_postfix(loss=loss.detach().item(), accuracy=accuracy.item())\n\ntrain_loop(model,train_dataloader,loss_fun,optim)\n\ndef test_loop(model,dataloader,loss_fun):\n    model.eval()\n    model.to(device)\n    losses = []\n    samples,correct = 0,0\n    loop = tqdm(enumerate(dataloader), total=len(dataloader), leave=True)\n    with torch.no_grad():\n        for batch,(x,y) in loop:\n            # put on cuda\n            x = x.to(device)\n            y = y.to(device)\n\n            # forward pass\n            y_pred = model(x)\n            \n            # caclulate test loss\n            loss = loss_fun(y_pred,y)\n            losses.append(loss.item())\n\n            # accuracy over entire dataset\n            _,predpos=y_pred.max(1)\n            samples+=len(y)\n            correct+=(predpos==y).sum().item()\n            \n            # Update TQDM progress bar\n            loop.set_postfix(loss=loss.item())\n\n    print(\"Final Accuracy = \",100 * (correct/samples))\n\ntest_loop(model,test_dataloader,loss_fun)\n\n","metadata":{"_uuid":"bef3f336-03b2-4ab9-9666-b94f238c32ed","_cell_guid":"8201c506-75d5-4443-8a63-1403e7077b6c","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}